generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Order {
  id        String    @id @default(cuid())
  name      String
  phone     String
  meals     Json?     // اختياري (يمكن أن يكون null)
  status    String   @default("new")
  confirmed Boolean   @default(false)
  createdAt DateTime  @default(now())
}

model Restaurant {
  id        String    @id @default(cuid())
  name      String
  imageUrl  String?  
  meals     Meal[]
  createdAt DateTime  @default(now())
}

model Meal {
  id           String     @id @default(cuid())
  name         String
  price        Float
  imageUrl     String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String
  createdAt    DateTime   @default(now())
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts      Account[]
  sessions      Session[]

  // بيانات إضافية مخصصة (optional)
  password      String?  // لو أردت دعم login بالبريد/كلمة المرور
  role          String   @default("user")
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

